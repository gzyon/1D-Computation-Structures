module beta (
    input left_button,
    input right_button,
    input reset,
    input start,
    
    input clk,
    input rst,
    output score[2][4],
    output map0_led[16],
    output map1_led[16],
    output map2_led[16],
    output map3_led[16],
    output map4_led[16],
    output map5_led[16],
    output player_led[16]
    
    
    // debugging
    //output playerpos[6],
    //output boundarycheck[16]
  ) {
  
  sig inputA[16];
  sig inputB[16];
  
  alu game_alu;
  
  .clk(clk) {
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    game_CU game_controlunit;
    
    .rst(rst) {
      //regfile game_regfile;
      counter slow_timer(#SIZE(1), #DIV(26));
      
    }
  }
  
  always {
    
    // pass timer to CU
    
    game_timer_detector.in = slow_timer.value;
    game_controlunit.decrease_timer = game_timer_detector.out;
    
    // pass button presses to CU
    
    game_controlunit.rst_button = reset;
    game_controlunit.start_button = start;
    game_controlunit.right_button = right_button;
    game_controlunit.left_button = left_button;
    
    // outputs to 7 segment
    
    //score = {game_regfile.out_score[3:0], 4h0}; // {game_regfile.out_score[3:0], 4h0};
    
    // LED inputs
    
    map0_led = game_controlunit.lane1;
    map1_led = game_controlunit.lane2;
    map2_led = game_controlunit.lane3;
    map3_led = game_controlunit.lane4;
    map4_led = game_controlunit.lane5;
    map5_led = game_controlunit.lane6;
    player_led = game_controlunit.player_position;
    score = {4h0, game_controlunit.score[3:0]};
    
    // regfile
    
    /*game_regfile.we = game_controlunit.we;
    game_regfile.write_address= game_controlunit.rc;
    
    game_regfile.read_address_a = game_controlunit.ra;
    game_regfile.read_address_b = game_controlunit.rb;       
    
    game_controlunit.regfile_b = game_regfile.read_data_b;*/
    
    // debugging
    //playerpos = game_regfile.playerpos[5:0];
    //boundarycheck = game_regfile.checkboundary;
    
    // asel
    
    /*case (game_controlunit.asel) {
      b00 : inputA = game_regfile.read_data_a;
      b01 : inputA = 16b1;
      b10 : inputA = 16b0;
      b11 : inputA = 16h1E;
      default : inputA = 0;
    }*/
    
    //bsel
    
    case (game_controlunit.bsel) {
      //b0000 : inputB = game_regfile.read_data_b;
      b0001 : inputB = 16b1;
      b0010 : inputB = 16b0;
      b0011 : inputB = 16h5;
      b0100 : inputB = 16h0020;
      b0101 : inputB = 16h0010;
      b0110 : inputB = 16h0008;
      b0111 : inputB = 16h0040;
      b1000 : inputB = 16h0020;
      b1001 : inputB = 16h0001;
      
      default : inputB = 0;
    }
    
    // ALU
    
    game_alu.a = game_controlunit.alu_a;
    game_alu.b = inputB;
    game_alu.alufn = game_controlunit.alufn;
    game_controlunit.alufn_out = game_alu.out;
    
    // wdsel mux
    
    /*case (game_controlunit.wdsel) {
      b1 : game_regfile.write_data = 0;
      default : // b0
        game_regfile.write_data = game_alu.out;
    }*/
    
  }
}