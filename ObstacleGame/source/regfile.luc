module regfile (
    input clk,  // clock
    input rst,  //reset
    input write_address[4],
    input we,
    input write_data[16],
    input read_address_a[4],
    input read_address_b[4],
    output read_data_a[16],
    output read_data_b[16],
    
    // output to seven segments 
    output out_timer[16],
    output out_score[16],
    
    // LED strip output 
    output map0[16],
    output map1[16],
    output map2[16],
    output map3[16],
    output map4[16],
    output map5[16],
    
    // debugging
    output player[16],
    output playerpos[16],
    output checkboundary[16]
  
  )

{
  .clk(clk){
    .rst(rst){
      dff column0[16];
      dff column1[16];
      dff column2[16];
      dff column3[16];
      dff column4[16];
      dff column5[16];
      dff timer[16];
      dff score[16];
      dff player_led[16];
      dff player_obs[16];
      dff pos_startLine[16];
      dff check_playerMovement[16];
      dff temp_var[16];
      dff temp_var2[16];
      dff temp_var3[16];
    }
  }
    
  always {
  
    read_data_a = 0;
    read_data_b = 0;
    out_timer = timer.q;
    out_score = score.q;
    map0 = column0.q;
    map1 = column1.q;
    map2 = column2.q;
    map3 = column3.q;
    map4 = column4.q;
    map5 = column5.q;
    player = player_led.q;
    playerpos = player_led.q;
    checkboundary = check_playerMovement.q;
    
  
    if (we){
      case (write_address){
        b0000: column0.d = write_data;
        b0001: column1.d = write_data;
        b0010: column2.d = write_data;
        b0011: column3.d = write_data;
        b0100: column4.d = write_data;
        b0101: column5.d = write_data;
        b0110: timer.d = write_data;
        b0111: score.d = write_data;
        b1000: player_led.d = write_data;
        b1001: pos_startLine.d = write_data;
        b1010: check_playerMovement.d = write_data;
        b1011: player_obs.d = write_data;
        b1111: temp_var.d = write_data;
        b1100: temp_var2.d = write_data;
        b1110: temp_var3.d = write_data;
      }
    }
    
    //read port a
    case (read_address_a){
      b0000: read_data_a = column0.q;
        b0001: read_data_a = column1.q;
        b0010: read_data_a = column2.q;
        b0011: read_data_a = column3.q;
        b0100: read_data_a = column4.q;
        b0101: read_data_a = column5.q;
        b0110: read_data_a = timer.q;
        b0111: read_data_a = score.q;
        b1000: read_data_a = player_led.q;
        b1001: read_data_a = pos_startLine.q;
        b1010: read_data_a = check_playerMovement.q;
        b1111: read_data_a = temp_var.q;
        b1011: read_data_a = player_obs.q;
        b1100: read_data_a = temp_var2.q;
        b1110: read_data_a = temp_var3.q;
        default: read_data_a = 0;
    }
    
    //read port b
    case (read_address_b){
        b0000: read_data_b = column0.q;
        b0001: read_data_b = column1.q;
        b0010: read_data_b = column2.q;
        b0011: read_data_b = column3.q;
        b0100: read_data_b = column4.q;
        b0101: read_data_b = column5.q;
        b0110: read_data_b = timer.q;
        b0111: read_data_b = score.q;
        b1000: read_data_b = player_led.q;
        b1001: read_data_b = pos_startLine.q;
        b1010: read_data_b = check_playerMovement.q;
        b1111: read_data_b = temp_var.q;
        b1100: read_data_b = temp_var2.q;
        b1110: read_data_b = temp_var3.q;
        b1011: read_data_b = player_obs.q;
        default: read_data_b = 0;
    }
        
}