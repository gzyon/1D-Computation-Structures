module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    input left_button,
    input right_button,
    input reset_button,
    input start_button,
    output map_led0,           // to LED strip, Br pin C49
    output map_led1,
    output map_led2,
    output map_led3,
    output map_led4,
    output map_led5,
    output playerled,
    output score_seg[8],
    output score_sel[2],
    //output io_led[3][8],
    output usb_tx          // USB->Serial output
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector detectLeft(#RISE(1), #FALL(0));
    edge_detector detectRight(#RISE(1), #FALL(0));
    edge_detector detectReset(#RISE(1), #FALL(0));
    edge_detector detectStart(#RISE(1), #FALL(0));
    
    button_conditioner condLeft;
    button_conditioner condRight;
    button_conditioner condReset;
    button_conditioner condStart;
    
    
    
    
    .rst(rst) { 
      beta gameCPU;
      multi_seven_seg score;
      mapLED columns;
      playerLED playerpos;
      
      ws2812b_writer col_0_led(#PIXEL_COUNT(7));
      ws2812b_writer col_1_led(#PIXEL_COUNT(7));
      ws2812b_writer col_2_led(#PIXEL_COUNT(7));
      ws2812b_writer col_3_led(#PIXEL_COUNT(7));
      ws2812b_writer col_4_led(#PIXEL_COUNT(7));
      ws2812b_writer col_5_led(#PIXEL_COUNT(7));
      ws2812b_writer player_led(#PIXEL_COUNT(7));
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    // io_led = 3x{{8h00}};    // turn LEDs off
    
    condLeft.in = left_button; //left
    condRight.in = right_button; //right
    condReset.in = reset_button;
    condStart.in = start_button;
    detectLeft.in = condLeft.out;
    detectRight.in = condRight.out;
    detectReset.in = condReset.out;
    detectStart.in = condStart.out;
    
    gameCPU.left_button = detectLeft.out;
    gameCPU.right_button = detectRight.out;
    gameCPU.reset = detectReset.out;
    gameCPU.start = detectStart.out;
    
   // debugging 
    
    //debug_led = gameCPU.led;
    //io_led[0][5:0] = gameCPU.playerpos;
    //io_led[1][0] = gameCPU.boundarycheck[0];
    
    player_led.update = 1;
    col_0_led.update = 1;
    col_1_led.update = 1;
    col_2_led.update = 1;
    col_3_led.update = 1;
    col_4_led.update = 1;
    col_5_led.update = 1;
    
    columns.col0 = gameCPU.map0_led;
    columns.col1 = gameCPU.map1_led;
    columns.col2 = gameCPU.map2_led;
    columns.col3 = gameCPU.map3_led;
    columns.col4 = gameCPU.map4_led;
    columns.col5 = gameCPU.map5_led;
    playerpos.sequence = gameCPU.player_led;
    
    col_0_led.color = columns.led_col0[col_0_led.pixel];
    col_1_led.color = columns.led_col1[col_1_led.pixel];
    col_2_led.color = columns.led_col2[col_2_led.pixel];
    col_3_led.color = columns.led_col3[col_3_led.pixel];
    col_4_led.color = columns.led_col4[col_4_led.pixel];
    col_5_led.color = columns.led_col5[col_5_led.pixel];
    player_led.color = playerpos.led_sequence[player_led.pixel];
    
    map_led0 = col_0_led.led;
    map_led1 = col_1_led.led;
    map_led2 = col_2_led.led;
    map_led3 = col_3_led.led;
    map_led4 = col_4_led.led;
    map_led5 = col_5_led.led;
    playerled = player_led.led;
    
    score_seg = ~score.seg;
    score_sel = ~score.sel;
    
    score.values = gameCPU.score;

  }
}