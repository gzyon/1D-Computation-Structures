/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module beta_6 (
    input left_button,
    input right_button,
    input reset,
    input start,
    input clk,
    input rst,
    output reg [7:0] score,
    output reg [15:0] map0_led,
    output reg [15:0] map1_led,
    output reg [15:0] map2_led,
    output reg [15:0] map3_led,
    output reg [15:0] map4_led,
    output reg [15:0] map5_led,
    output reg [15:0] player_led,
    output reg [5:0] playerpos,
    output reg [15:0] boundarycheck
  );
  
  
  
  reg [15:0] inputA;
  
  reg [15:0] inputB;
  
  wire [16-1:0] M_game_alu_out;
  wire [3-1:0] M_game_alu_zvn;
  reg [16-1:0] M_game_alu_a;
  reg [16-1:0] M_game_alu_b;
  reg [6-1:0] M_game_alu_alufn;
  alu_10 game_alu (
    .a(M_game_alu_a),
    .b(M_game_alu_b),
    .alufn(M_game_alu_alufn),
    .out(M_game_alu_out),
    .zvn(M_game_alu_zvn)
  );
  
  wire [96-1:0] M_map_out;
  reg [3-1:0] M_map_select;
  mapROM_11 map (
    .select(M_map_select),
    .out(M_map_out)
  );
  
  wire [1-1:0] M_game_timer_detector_out;
  reg [1-1:0] M_game_timer_detector_in;
  edge_detector_2 game_timer_detector (
    .clk(clk),
    .in(M_game_timer_detector_in),
    .out(M_game_timer_detector_out)
  );
  reg [2:0] M_selectmap_d, M_selectmap_q = 1'h0;
  wire [16-1:0] M_game_regfile_read_data_a;
  wire [16-1:0] M_game_regfile_read_data_b;
  wire [16-1:0] M_game_regfile_out_timer;
  wire [16-1:0] M_game_regfile_out_score;
  wire [16-1:0] M_game_regfile_map0;
  wire [16-1:0] M_game_regfile_map1;
  wire [16-1:0] M_game_regfile_map2;
  wire [16-1:0] M_game_regfile_map3;
  wire [16-1:0] M_game_regfile_map4;
  wire [16-1:0] M_game_regfile_map5;
  wire [16-1:0] M_game_regfile_player;
  wire [16-1:0] M_game_regfile_playerpos;
  wire [16-1:0] M_game_regfile_checkboundary;
  reg [4-1:0] M_game_regfile_write_address;
  reg [1-1:0] M_game_regfile_we;
  reg [16-1:0] M_game_regfile_write_data;
  reg [4-1:0] M_game_regfile_read_address_a;
  reg [4-1:0] M_game_regfile_read_address_b;
  regfile_12 game_regfile (
    .clk(clk),
    .rst(rst),
    .write_address(M_game_regfile_write_address),
    .we(M_game_regfile_we),
    .write_data(M_game_regfile_write_data),
    .read_address_a(M_game_regfile_read_address_a),
    .read_address_b(M_game_regfile_read_address_b),
    .read_data_a(M_game_regfile_read_data_a),
    .read_data_b(M_game_regfile_read_data_b),
    .out_timer(M_game_regfile_out_timer),
    .out_score(M_game_regfile_out_score),
    .map0(M_game_regfile_map0),
    .map1(M_game_regfile_map1),
    .map2(M_game_regfile_map2),
    .map3(M_game_regfile_map3),
    .map4(M_game_regfile_map4),
    .map5(M_game_regfile_map5),
    .player(M_game_regfile_player),
    .playerpos(M_game_regfile_playerpos),
    .checkboundary(M_game_regfile_checkboundary)
  );
  wire [1-1:0] M_slow_timer_value;
  counter_13 slow_timer (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_value)
  );
  wire [1-1:0] M_game_controlunit_we;
  wire [1-1:0] M_game_controlunit_wdsel;
  wire [4-1:0] M_game_controlunit_asel;
  wire [4-1:0] M_game_controlunit_bsel;
  wire [6-1:0] M_game_controlunit_alufn;
  wire [4-1:0] M_game_controlunit_ra;
  wire [4-1:0] M_game_controlunit_rb;
  wire [4-1:0] M_game_controlunit_rc;
  reg [1-1:0] M_game_controlunit_decrease_timer;
  reg [16-1:0] M_game_controlunit_regfile_b;
  reg [1-1:0] M_game_controlunit_left_button;
  reg [1-1:0] M_game_controlunit_right_button;
  reg [1-1:0] M_game_controlunit_rst_button;
  reg [1-1:0] M_game_controlunit_start_button;
  game_CU_14 game_controlunit (
    .clk(clk),
    .rst(rst),
    .decrease_timer(M_game_controlunit_decrease_timer),
    .regfile_b(M_game_controlunit_regfile_b),
    .left_button(M_game_controlunit_left_button),
    .right_button(M_game_controlunit_right_button),
    .rst_button(M_game_controlunit_rst_button),
    .start_button(M_game_controlunit_start_button),
    .we(M_game_controlunit_we),
    .wdsel(M_game_controlunit_wdsel),
    .asel(M_game_controlunit_asel),
    .bsel(M_game_controlunit_bsel),
    .alufn(M_game_controlunit_alufn),
    .ra(M_game_controlunit_ra),
    .rb(M_game_controlunit_rb),
    .rc(M_game_controlunit_rc)
  );
  
  always @* begin
    M_selectmap_d = M_selectmap_q;
    
    M_game_timer_detector_in = M_slow_timer_value;
    M_game_controlunit_decrease_timer = M_game_timer_detector_out;
    M_game_controlunit_rst_button = reset;
    M_game_controlunit_start_button = start;
    M_game_controlunit_right_button = right_button;
    M_game_controlunit_left_button = left_button;
    score = {M_game_regfile_out_score[0+3-:4], 4'h0};
    map0_led = M_game_regfile_map0;
    map1_led = M_game_regfile_map1;
    map2_led = M_game_regfile_map2;
    map3_led = M_game_regfile_map3;
    map4_led = M_game_regfile_map4;
    map5_led = M_game_regfile_map5;
    player_led = M_game_regfile_player;
    M_game_regfile_we = M_game_controlunit_we;
    M_game_regfile_write_address = M_game_controlunit_rc;
    M_game_regfile_read_address_a = M_game_controlunit_ra;
    M_game_regfile_read_address_b = M_game_controlunit_rb;
    M_map_select = M_selectmap_q;
    if (M_game_regfile_out_score == 1'h0) begin
      M_selectmap_d = 1'h0;
    end else begin
      if (M_game_regfile_out_score == 1'h1) begin
        M_selectmap_d = 1'h1;
      end else begin
        if (M_game_regfile_out_score == 2'h2) begin
          M_selectmap_d = 4'ha;
        end else begin
          if (M_game_regfile_out_score == 2'h3) begin
            M_selectmap_d = 4'hb;
          end else begin
            if (M_game_regfile_out_score == 3'h4) begin
              M_selectmap_d = 7'h64;
            end
          end
        end
      end
    end
    M_game_controlunit_regfile_b = M_game_regfile_read_data_b;
    playerpos = M_game_regfile_playerpos[0+5-:6];
    boundarycheck = M_game_regfile_checkboundary;
    
    case (M_game_controlunit_asel)
      4'h0: begin
        inputA = M_game_regfile_read_data_a;
      end
      4'h1: begin
        inputA = 16'h0001;
      end
      4'h2: begin
        inputA = 16'h0000;
      end
      4'h3: begin
        inputA = 16'h001e;
      end
      4'h4: begin
        inputA = M_map_out[0+15-:16];
      end
      4'h5: begin
        inputA = M_map_out[16+15-:16];
      end
      4'h6: begin
        inputA = M_map_out[32+15-:16];
      end
      4'h7: begin
        inputA = M_map_out[48+15-:16];
      end
      4'h8: begin
        inputA = M_map_out[64+15-:16];
      end
      4'h9: begin
        inputA = M_map_out[80+15-:16];
      end
      default: begin
        inputA = 1'h0;
      end
    endcase
    
    case (M_game_controlunit_bsel)
      4'h0: begin
        inputB = M_game_regfile_read_data_b;
      end
      4'h1: begin
        inputB = 16'h0001;
      end
      4'h2: begin
        inputB = 16'h0000;
      end
      4'h3: begin
        inputB = 16'h0005;
      end
      4'h4: begin
        inputB = 16'h0020;
      end
      4'h5: begin
        inputB = 16'h0010;
      end
      4'h6: begin
        inputB = 16'h0008;
      end
      4'h7: begin
        inputB = 16'h0040;
      end
      4'h8: begin
        inputB = 16'h0020;
      end
      4'h9: begin
        inputB = 16'h0001;
      end
      4'ha: begin
        inputB = {1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, M_map_out[0+0+0-:1], M_map_out[16+0+0-:1], M_map_out[32+0+0-:1], M_map_out[48+0+0-:1], M_map_out[64+0+0-:1], M_map_out[80+0+0-:1]};
      end
      default: begin
        inputB = 1'h0;
      end
    endcase
    M_game_alu_a = inputA;
    M_game_alu_b = inputB;
    M_game_alu_alufn = M_game_controlunit_alufn;
    
    case (M_game_controlunit_wdsel)
      1'h1: begin
        M_game_regfile_write_data = 1'h0;
      end
      default: begin
        M_game_regfile_write_data = M_game_alu_out;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_selectmap_q <= M_selectmap_d;
  end
  
endmodule
