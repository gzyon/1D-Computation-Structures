/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module initialise_col_LED_4 (
    input clk,
    input [15:0] col0,
    input [15:0] col1,
    input [15:0] col2,
    input [15:0] col3,
    input [15:0] col4,
    input [15:0] col5,
    output reg [167:0] col0_led,
    output reg [167:0] col1_led,
    output reg [167:0] col2_led,
    output reg [167:0] col3_led,
    output reg [167:0] col4_led,
    output reg [167:0] col5_led,
    output reg done
  );
  
  
  
  reg M_count_d, M_count_q = 1'h0;
  reg M_count1_d, M_count1_q = 1'h0;
  reg M_count2_d, M_count2_q = 1'h0;
  reg M_count3_d, M_count3_q = 1'h0;
  reg M_count4_d, M_count4_q = 1'h0;
  reg M_count5_d, M_count5_q = 1'h0;
  reg [167:0] M_col0_out_d, M_col0_out_q = 1'h0;
  reg [167:0] M_col1_out_d, M_col1_out_q = 1'h0;
  reg [167:0] M_col2_out_d, M_col2_out_q = 1'h0;
  reg [167:0] M_col3_out_d, M_col3_out_q = 1'h0;
  reg [167:0] M_col4_out_d, M_col4_out_q = 1'h0;
  reg [167:0] M_col5_out_d, M_col5_out_q = 1'h0;
  localparam IDLE_binary_to_hex = 3'd0;
  localparam BINARYTOHEX1_binary_to_hex = 3'd1;
  localparam BINARYTOHEX2_binary_to_hex = 3'd2;
  localparam BINARYTOHEX3_binary_to_hex = 3'd3;
  localparam BINARYTOHEX4_binary_to_hex = 3'd4;
  localparam BINARYTOHEX5_binary_to_hex = 3'd5;
  localparam BINARYTOHEX6_binary_to_hex = 3'd6;
  
  reg [2:0] M_binary_to_hex_d, M_binary_to_hex_q = IDLE_binary_to_hex;
  
  always @* begin
    M_binary_to_hex_d = M_binary_to_hex_q;
    M_count1_d = M_count1_q;
    M_count2_d = M_count2_q;
    M_col2_out_d = M_col2_out_q;
    M_col1_out_d = M_col1_out_q;
    M_count5_d = M_count5_q;
    M_count3_d = M_count3_q;
    M_count4_d = M_count4_q;
    M_count_d = M_count_q;
    M_col0_out_d = M_col0_out_q;
    M_col3_out_d = M_col3_out_q;
    M_col4_out_d = M_col4_out_q;
    M_col5_out_d = M_col5_out_q;
    
    M_count_d = 1'h0;
    M_count1_d = 1'h0;
    M_count2_d = 1'h0;
    M_count3_d = 1'h0;
    M_count4_d = 1'h0;
    M_count5_d = 1'h0;
    col0_led = M_col0_out_q;
    col1_led = M_col1_out_q;
    col2_led = M_col2_out_q;
    col3_led = M_col3_out_q;
    col4_led = M_col4_out_q;
    col5_led = M_col5_out_q;
    M_col0_out_d = 168'h000000000000000000000000000000000000000000;
    M_col1_out_d = 168'h000000000000000000000000000000000000000000;
    M_col2_out_d = 168'h000000000000000000000000000000000000000000;
    M_col3_out_d = 168'h000000000000000000000000000000000000000000;
    M_col4_out_d = 168'h000000000000000000000000000000000000000000;
    M_col5_out_d = 168'h000000000000000000000000000000000000000000;
    done = 1'h0;
    
    case (M_binary_to_hex_q)
      BINARYTOHEX1_binary_to_hex: begin
        if (col0[(M_count_q)*1+0-:1]) begin
          M_col0_out_d[(M_count_q)*24+23-:24] = 24'hff0000;
          M_count_d = M_count_q + 1'h1;
        end else begin
          M_col0_out_d[(M_count_q)*24+23-:24] = 24'h000000;
          M_count_d = M_count_q + 1'h1;
        end
        if (M_count_q == 3'h7) begin
          M_binary_to_hex_d = BINARYTOHEX2_binary_to_hex;
        end
      end
      BINARYTOHEX2_binary_to_hex: begin
        if (col1[(M_count1_q)*1+0-:1]) begin
          M_col1_out_d[(M_count1_q)*24+23-:24] = 24'hff0000;
          M_count1_d = M_count1_q + 1'h1;
        end else begin
          M_col1_out_d[(M_count1_q)*24+23-:24] = 24'h000000;
          M_count1_d = M_count1_q + 1'h1;
        end
        if (M_count1_q == 3'h7) begin
          M_binary_to_hex_d = BINARYTOHEX3_binary_to_hex;
        end
      end
      BINARYTOHEX3_binary_to_hex: begin
        if (col2[(M_count2_q)*1+0-:1]) begin
          M_col2_out_d[(M_count2_q)*24+23-:24] = 24'hff0000;
          M_count2_d = M_count2_q + 1'h1;
        end else begin
          M_col2_out_d[(M_count2_q)*24+23-:24] = 24'h000000;
          M_count2_d = M_count2_q + 1'h1;
        end
        if (M_count2_q == 3'h7) begin
          M_binary_to_hex_d = BINARYTOHEX4_binary_to_hex;
        end
      end
      BINARYTOHEX4_binary_to_hex: begin
        if (col3[(M_count3_q)*1+0-:1]) begin
          M_col3_out_d[(M_count3_q)*24+23-:24] = 24'hff0000;
          M_count3_d = M_count3_q + 1'h1;
        end else begin
          M_col3_out_d[(M_count3_q)*24+23-:24] = 24'h000000;
          M_count3_d = M_count3_q + 1'h1;
        end
        if (M_count3_q == 3'h7) begin
          M_binary_to_hex_d = BINARYTOHEX5_binary_to_hex;
        end
      end
      BINARYTOHEX5_binary_to_hex: begin
        if (col4[(M_count4_q)*1+0-:1]) begin
          M_col4_out_d[(M_count4_q)*24+23-:24] = 24'hff0000;
          M_count4_d = M_count4_q + 1'h1;
        end else begin
          M_col4_out_d[(M_count4_q)*24+23-:24] = 24'h000000;
          M_count4_d = M_count4_q + 1'h1;
        end
        if (M_count4_q == 3'h7) begin
          M_binary_to_hex_d = BINARYTOHEX6_binary_to_hex;
        end
      end
      BINARYTOHEX6_binary_to_hex: begin
        if (col5[(M_count5_q)*1+0-:1]) begin
          M_col5_out_d[(M_count5_q)*24+23-:24] = 24'hff0000;
          M_count5_d = M_count5_q + 1'h1;
        end else begin
          M_col5_out_d[(M_count5_q)*24+23-:24] = 24'h000000;
          M_count5_d = M_count5_q + 1'h1;
        end
        if (M_count5_q == 3'h7) begin
          M_binary_to_hex_d = IDLE_binary_to_hex;
        end
      end
      IDLE_binary_to_hex: begin
        done = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_count_q <= M_count_d;
    M_count1_q <= M_count1_d;
    M_count2_q <= M_count2_d;
    M_count3_q <= M_count3_d;
    M_count4_q <= M_count4_d;
    M_count5_q <= M_count5_d;
    M_col0_out_q <= M_col0_out_d;
    M_col1_out_q <= M_col1_out_d;
    M_col2_out_q <= M_col2_out_d;
    M_col3_out_q <= M_col3_out_d;
    M_col4_out_q <= M_col4_out_d;
    M_col5_out_q <= M_col5_out_d;
    M_binary_to_hex_q <= M_binary_to_hex_d;
  end
  
endmodule
